Emux <http://emux.googlecode.com>

These are the release notes for Emux and tell you what this project is about,
how to build it, how to install it, and how to run it.

WHAT IS EMUX?

  Emux is a cross-platform emulator project with a goal of emulating multiple
  kinds of machines related to gaming, such as consoles or arcades. Its
  philosophy is very much inspired by the Linux kernel (hence the name), which
  brilliantly manages to support multiple machines while keeping drivers
  entirely platform-independent. Emux is designed in the same way, keeping a
  code base of CPUs and controllers separate from machines.

  It is distributed under the GNU General Public License v2 - see the
  accompanying COPYING file for more details.

SOFTWARE DEPENDENCIES

  Before being able to build Emux, kconfig-frontends needs to be installed on
  your host machine. Linux developers should be very familiar with menuconfig,
  a convenient menu-driven user interface allowing the configuration of the
  Linux kernel. Developed by Yann E. Morin, kconfig-frontends offers the ability
  to use the same configuration system for any project, such as Emux. Once
  kconfig-frontends is built and installed, make sure kconfig-mconf is
  available on your system, as Emux uses this particular frontend.

  Emux can use different audio and video/input frontends. At the time of
  writing, SDL and libcaca are supported for video/input and only SDL for audio.
  During the configuration step, you may select the frontends to be included
  in the build. The configure script will complain if these libraries are not
  found.

  Here are the software dependencies for a full-featured build of Emux:
  - autoconf
  - automake
  - pkg-config
  - kconfig-frontends (with mconf support)
  - libsdl1.2-dev
  - libcaca-dev

CONFIGURING EMUX

  Once all the software dependencies are taken care of, navigate to the emux
  sources folder from a terminal and execute the following command to configure
  Emux:
    ./configure

  This should bring up a menuconfig interface where you can specify frontends,
  machines, CPUs, and controllers to build. If you need help with one particular
  item, press 'h' to show a basic description of your selection.

  Note: standard rules apply if you need to cross-compile Emux.

BUILDING EMUX

  After completion of the configuration step, building is as easy as executing
  the following command:
    make

  As the standard GNU make utility is used, you may append the -j<n> option
  to speed up the build process, where n is your number of execution units.
  Example:
    make -j16

INSTALLING EMUX

  If nothing went wrong during the build process, Emux can be installed on your
  system by executing the following command:
    make install

RUNNING EMUX

  Once installed on your system, you should now be able to run Emux. Here is a
  list of the available options:
    --machine=MACH    Select machine to emulate
    --audio=AUDIO     Select audio frontend
    --video=VIDEO     Select video frontend
    --width=WIDTH     Override window width
    --height=HEIGHT   Override window height
    --debugger        Enable debugger support
    --help            Display help, available frontends and machines

  If you would like to run INVADERS (CHIP-8) using libcaca for graphics, SDL for
  audio, and use the default window size, the command would be:
    emux --machine=chip8 --video=sdl --audio=sdl --rom=INVADERS

  Every machine has its subset of options which can be displayed by executing
  emux --machine=MACH where MACH is the machine name. Example:
    emux --machine=nes

USING THE DEBUGGER
  The --debugger option brings up the debugger prompt after launching Emux. The
  interface used is very similar to gdb. From there, multiple commands can be
  executed:
  - help               Display available commands
  - run                Start machine execution
  - continue           Continue machine execution
  - kill               Stop machine execution
  - quit               Quit debugger and Emux
  - break <address>    Add breakpoint
  - watch <address>    Add watchpoint
  - list               List batchpoints/watchpoints
  - delete <id>        Delete breakpoint/watchpoint

  Ctrl-C (Linux only at this moment) pauses the machine execution (if running)
  and displays the debugger prompt. Typing the first letter of a command (for
  instead 'b' for 'break') works as well.

HELP
  If you need help with Emux, or would like to report bugs (as long as these are
  detailed), feel free to contact me directly at sronsse@gmail.com. Emux is
  open-source, so if you would like to contribute to the project, you may
  contact me as well.

